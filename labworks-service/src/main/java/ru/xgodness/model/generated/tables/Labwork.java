/*
 * This file is generated by jOOQ.
 */
package ru.xgodness.model.generated.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import ru.xgodness.model.generated.Keys;
import ru.xgodness.model.generated.Public;
import ru.xgodness.model.generated.enums.DifficultyT;
import ru.xgodness.model.generated.tables.Discipline.DisciplinePath;
import ru.xgodness.model.generated.tables.records.LabworkRecord;

import javax.annotation.processing.Generated;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.19.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Labwork extends TableImpl<LabworkRecord> {

    /**
     * The reference instance of <code>public.labwork</code>
     */
    public static final Labwork LABWORK = new Labwork();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.labwork.id</code>.
     */
    public final TableField<LabworkRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");
    /**
     * The column <code>public.labwork.name</code>.
     */
    public final TableField<LabworkRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>public.labwork.coordinate_x</code>.
     */
    public final TableField<LabworkRecord, Long> COORDINATE_X = createField(DSL.name("coordinate_x"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>public.labwork.coordinate_y</code>.
     */
    public final TableField<LabworkRecord, Integer> COORDINATE_Y = createField(DSL.name("coordinate_y"), SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>public.labwork.creation_date</code>.
     */
    public final TableField<LabworkRecord, LocalDate> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATE.nullable(false), this, "");
    /**
     * The column <code>public.labwork.minimal_point</code>.
     */
    public final TableField<LabworkRecord, Double> MINIMAL_POINT = createField(DSL.name("minimal_point"), SQLDataType.DOUBLE.nullable(false), this, "");
    /**
     * The column <code>public.labwork.difficulty</code>.
     */
    public final TableField<LabworkRecord, DifficultyT> DIFFICULTY = createField(DSL.name("difficulty"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(DifficultyT.class), this, "");
    /**
     * The column <code>public.labwork.faculty</code>.
     */
    public final TableField<LabworkRecord, String> FACULTY = createField(DSL.name("faculty"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>public.labwork.discipline</code>.
     */
    public final TableField<LabworkRecord, String> DISCIPLINE = createField(DSL.name("discipline"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    private transient DisciplinePath _discipline;

    private Labwork(Name alias, Table<LabworkRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Labwork(Name alias, Table<LabworkRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.labwork</code> table reference
     */
    public Labwork(String alias) {
        this(DSL.name(alias), LABWORK);
    }

    /**
     * Create an aliased <code>public.labwork</code> table reference
     */
    public Labwork(Name alias) {
        this(alias, LABWORK);
    }

    /**
     * Create a <code>public.labwork</code> table reference
     */
    public Labwork() {
        this(DSL.name("labwork"), null);
    }

    public <O extends Record> Labwork(Table<O> path, ForeignKey<O, LabworkRecord> childPath, InverseForeignKey<O, LabworkRecord> parentPath) {
        super(path, childPath, parentPath, LABWORK);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabworkRecord> getRecordType() {
        return LabworkRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<LabworkRecord, Long> getIdentity() {
        return (Identity<LabworkRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LabworkRecord> getPrimaryKey() {
        return Keys.LABWORK_PKEY;
    }

    @Override
    public List<ForeignKey<LabworkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LABWORK__LABWORK_FACULTY_DISCIPLINE_FKEY);
    }

    /**
     * Get the implicit join path to the <code>public.discipline</code> table.
     */
    public DisciplinePath discipline() {
        if (_discipline == null)
            _discipline = new DisciplinePath(this, Keys.LABWORK__LABWORK_FACULTY_DISCIPLINE_FKEY, null);

        return _discipline;
    }

    @Override
    public List<Check<LabworkRecord>> getChecks() {
        return Arrays.asList(
                Internal.createCheck(this, DSL.name("labwork_coordinate_x_check"), "((coordinate_x >= '-896'::integer))", true),
                Internal.createCheck(this, DSL.name("labwork_coordinate_y_check"), "((coordinate_y >= '-528'::integer))", true),
                Internal.createCheck(this, DSL.name("labwork_minimal_point_check"), "((minimal_point > (0)::double precision))", true),
                Internal.createCheck(this, DSL.name("labwork_name_check"), "(((name)::text <> ''::text))", true)
        );
    }

    @Override
    public Labwork as(String alias) {
        return new Labwork(DSL.name(alias), this);
    }

    @Override
    public Labwork as(Name alias) {
        return new Labwork(alias, this);
    }

    @Override
    public Labwork as(Table<?> alias) {
        return new Labwork(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Labwork rename(String name) {
        return new Labwork(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Labwork rename(Name name) {
        return new Labwork(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Labwork rename(Table<?> name) {
        return new Labwork(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Labwork where(Condition condition) {
        return new Labwork(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Labwork where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Labwork where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Labwork where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Labwork where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Labwork where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Labwork where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Labwork where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Labwork whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Labwork whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LabworkPath extends Labwork implements Path<LabworkRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> LabworkPath(Table<O> path, ForeignKey<O, LabworkRecord> childPath, InverseForeignKey<O, LabworkRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private LabworkPath(Name alias, Table<LabworkRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LabworkPath as(String alias) {
            return new LabworkPath(DSL.name(alias), this);
        }

        @Override
        public LabworkPath as(Name alias) {
            return new LabworkPath(alias, this);
        }

        @Override
        public LabworkPath as(Table<?> alias) {
            return new LabworkPath(alias.getQualifiedName(), this);
        }
    }
}
