/*
 * This file is generated by jOOQ.
 */
package model.generated.tables;


import model.generated.Keys;
import model.generated.Public;
import model.generated.tables.Discipline.DisciplinePath;
import model.generated.tables.records.FacultyRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.19.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Faculty extends TableImpl<FacultyRecord> {

    /**
     * The reference instance of <code>public.faculty</code>
     */
    public static final Faculty FACULTY = new Faculty();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.faculty.name</code>.
     */
    public final TableField<FacultyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    private transient DisciplinePath _discipline;

    private Faculty(Name alias, Table<FacultyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Faculty(Name alias, Table<FacultyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.faculty</code> table reference
     */
    public Faculty(String alias) {
        this(DSL.name(alias), FACULTY);
    }

    /**
     * Create an aliased <code>public.faculty</code> table reference
     */
    public Faculty(Name alias) {
        this(alias, FACULTY);
    }

    /**
     * Create a <code>public.faculty</code> table reference
     */
    public Faculty() {
        this(DSL.name("faculty"), null);
    }

    public <O extends Record> Faculty(Table<O> path, ForeignKey<O, FacultyRecord> childPath, InverseForeignKey<O, FacultyRecord> parentPath) {
        super(path, childPath, parentPath, FACULTY);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FacultyRecord> getRecordType() {
        return FacultyRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<FacultyRecord> getPrimaryKey() {
        return Keys.FACULTY_PKEY;
    }

    /**
     * Get the implicit to-many join path to the <code>public.discipline</code>
     * table
     */
    public DisciplinePath discipline() {
        if (_discipline == null)
            _discipline = new DisciplinePath(this, null, Keys.DISCIPLINE__DISCIPLINE_FACULTY_FKEY.getInverseKey());

        return _discipline;
    }

    @Override
    public List<Check<FacultyRecord>> getChecks() {
        return Arrays.asList(
                Internal.createCheck(this, DSL.name("faculty_name_check"), "(((name)::text <> ''::text))", true)
        );
    }

    @Override
    public Faculty as(String alias) {
        return new Faculty(DSL.name(alias), this);
    }

    @Override
    public Faculty as(Name alias) {
        return new Faculty(alias, this);
    }

    @Override
    public Faculty as(Table<?> alias) {
        return new Faculty(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Faculty rename(String name) {
        return new Faculty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Faculty rename(Name name) {
        return new Faculty(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Faculty rename(Table<?> name) {
        return new Faculty(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Faculty where(Condition condition) {
        return new Faculty(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Faculty where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Faculty where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Faculty where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Faculty where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Faculty where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Faculty where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Faculty where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Faculty whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Faculty whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FacultyPath extends Faculty implements Path<FacultyRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> FacultyPath(Table<O> path, ForeignKey<O, FacultyRecord> childPath, InverseForeignKey<O, FacultyRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private FacultyPath(Name alias, Table<FacultyRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FacultyPath as(String alias) {
            return new FacultyPath(DSL.name(alias), this);
        }

        @Override
        public FacultyPath as(Name alias) {
            return new FacultyPath(alias, this);
        }

        @Override
        public FacultyPath as(Table<?> alias) {
            return new FacultyPath(alias.getQualifiedName(), this);
        }
    }
}
